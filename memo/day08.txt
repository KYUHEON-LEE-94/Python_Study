day08
과제풀이 -> 복습 -> 문자열 메소드 -> 사용자 함수

7일차 과제풀이 링크
https://colab.research.google.com/drive/1O2O19Td212F001t5OVgJjD1hWvYvyG3j?usp=sharing

8일차 수업예제 링크
https://colab.research.google.com/drive/1JnUQokMhVMiEJP9dUF7szL15szOerDEf?usp=sharing

0. 복습
1)  시퀀스 자료형 : 리스트, 문자열, 튜플
2) 비시퀀스 자료형 : 세트, 딕셔너리
3) 내장 함수
	- 문자열 내장함수(4개) : chr(), eval(), format(), str()
	- 숫자 내장함수(9개) : abs(), divmod(), float(), int(), max(), min(), pow(),
				round(), sum()
	- 시퀀스 내장함수(5개) : enumerate(), range(), len(), sorted(), zip()

1. 문자열 메소드(9개)
* 메소드란 특정 객체(object)가 가지고 있는 함수를 의미
	- 문자열을 처리하기 위해 많은 메소드가 제공됨
	- 빅데이터 분석, 인공지능, 웹 크롤링 등 파이썬을 이용하는 영역에서 활용됨

	***(1) .format()
		-문자열을 정렬해주는 옵션도 가지고 있음
	옵션		의미
	<		지정된 공간내에서 왼쪽 정렬
	>		지정된 공간내에서 오른쪽 정렬
	^		지정된 공간내에서 가운데 정렬

	**(2) .count()
		- 문자열 내부에 포함된 특정 문자열의 개수를 반환하는 메소드
		- 인덱스를 지정해서 검색 범위를 지정가능
		- 파이썬은 마이너스 인덱스를 지원하기 때문에 마이너스 인덱스도 사용가능

	(3) .find()
		- 문자열 내부에 포함된 특정 문자열 찾고자 할 때 사용하는 메소드
		- 찾고자하는 문자열이 있다면 그 문자열이 처음 나온 위치, 인덱스(index)를 반환
		- 찾고자하는 문자열이 없다면 -1의 값을 반환
		- rfind()	문자열의 뒤에서 앞으로 이동하면서 찾는다!
	
	(4) .index()
		- .find() 메소드와 같은 역할을 하며 사용방법도 동일함
		- 찾고자하는 문자열이 없을 때 오류발생!

	(5) 대소문자 변환 메소드
		apple, APPLE, Apple
		- 파이썬은 대소문자 구분함
		- 같은 단어로 인식시키기 위해 대소문자 변환 메소드를 이용함
		
	.upper()	: 모두 대문자로 변환한 결과를 반환
	.lower()	: 모두 소문자로 변환한 결과를 반환
	.capitalize() : 첫글자만 대문자, 나머지는 소문자로 변환한 결과를 반환

	(6) .join() 메소드
		- 인수로 전달된 반복가능 객체의 각 요소에 문자열 포함시켜서 새로운
		문자열을 만들고 그 결과를 반환하는 메소드
		- 딕셔너리에서 join()사용하면 key끼리 연결해서 결과반환, value 사용되지 않음

	**(7) .replace() 메소드
		- 문자열의 일부 문자열을 다른 문자열로 바꾼 결과를 반환
		- 전달한 2개의 인수 중에서 첫번째 인수를 두번째 인수로 바꾼 문자열로 반환
	
	**(8) .split() 메소드
		- 하나의 문자열을 여러개의 문자열로 분리하여 저장한 리스트를 반환하는 메소드
		- 기본적으로 공백을 기준으로 분리하지만 특정 문자열을 기준으로 분리가능함

	(9) 불필요한 문자열 제거 메소드
		- 문자열의 양 끝에 있는 불필요한 문자열들을 제거하는 메소드
		- 양 끝의 문자열을 제거할 수 있지만 중간에 포함된 문자열은 제거하지 못함
		
	메소드			의미
	lstrip			왼쪽 끝에 있는 불필요한 문자열 제거한 결과 반환(left strip)
	rstrip			오른쪽 끝에 있는 불필요한 문자열 제거한 결과 반환(right strip)
	strip			양쪽 끝에 있는 불필요한 문자열 제거한 결과 반환

2. 사용자 정의 함수
	반복되는 코드, 행위, 기능들을 쉽게 관리하기 위해서 선언해서 사용

	함수(function) : 주어진 값에 정해진 처리를 해서 그 결과를 반환하는 기능
			특정기능을 실행하는 코드 또는 코드의 모임

	f	(x) 	= 2x + 1
	함수이름	  매개변수   리턴값
	x = 1	=> 3
	x = 2	=> 5
	x = 3  	=> 7

	함수 사용 목적
	1. 코드의 간결화
	2. 코드의 재사용

	함수 선언
	def 함수명(매개변수1, 매개변수2, ...):
		실행할 문장(본문)
		return 리턴(반환)값

용어 	1) 함수 정의 : 사용자가 필요로하는(사용자함수) 함수를 새로 만드는 것을 의미
	2) 인수 : 함수에 전달할 입력(input)을 의미, argument
	3) 매개변수 : 인수를 받아서 저장하는 변수를 의미, parameter
	4) 반환값 : 사용자함수의 출력(output)을 의미, return
	5) 함수 호출 : 만들어진 사용자 함수를 실제로 사용하는 것을 의미

1) 함수 정의
	함수를 만드는 것을 의미, def라는 키워드를 이용함

	def 함수이름(매개변수):
		본문
		return
	- 함수이름은 개발자 마음, 괄호안에 있는 매개변수는 함수에 전달되는 인수가 저장될 변수
	- 함수 본문은 모두 들여쓰기 문법사용
	- return은 필수적이지않음

2) 인수와 매개변수
	함수로 전달되는 인수를 저장하는 변수를 매개변수라고 함
	1) 디폴트 매개변수
		- 전달되는 인수가 없는 경우에 사용할 수 있도록 매개변수에 기본값을 설정할수 있음
		- 맨뒤에서부터 작성해야하고, 앞에서부터 작성할 경우 오류발생

	2) 가변 매개변수
		- 만드는 키워드 *, 매개변수 앞에 *가 있다면 가변매개변수
		- 전달되는 모든 인수를 하나의 튜플로 만들어줌

3) 함수 호출
	함수를 호출한다는 것은 정의된 함수를 사용하겠다라는 의미
	(1) 매개변수가 없고, 반환값도 없다.
		함수이름()
	(2) 매개변수는 있고, 반환값이 없다.
		함수이름(매개변수)
	(3) 매개변수는 없고, 반환값이 있다.
		변수 = 함수이름()
	(4) 매개변수도 있고, 반환값도 있다.
		변수 = 함수이름(매개변수)

4) 반환값(return value)
	함수 호출 결과를 반환해줌
	반환값이 있으면 함수 내부에 return문을 통해서 값을 반환할 수 있고
	반환값이 없으면 함수 내부에 return문을 작성할 필요가 없음
	
	반환값을 사용할 때
		- 함수내에서 모든 작업이 완료되지 않을 때
		- 사용하는 부분에서 해야 할 작업이 더 남았을 때
		- 사용하는 부분에 함수 내의 작업 결과를 알려줘야할 때
		** 함수를 종료할 때

	반환값을 사용하지 않을 때
		- 함수내에서 출력까지 모든 작업이 완료될 때

5) 지역변수와 전역변수
	-지역변수(local variable)
		함수 내부에서 선언한 변수는 함수 내부에서만 사용할 수 있음
		함수 외부에서는 지역변수에 접근이 불가능함

	-전역변수(global)
		함수 외부에서 선언한 변수는 함수 내부나 함수 외부에서 모두 사용할 수 있음


















