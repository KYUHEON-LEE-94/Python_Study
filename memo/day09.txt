day09
복습 -> 람다함수 -> 맵함수 -> 필터함수 -> 변수(지역변수, 전역변수) -> 모듈 -> 클래스

9일차 수업예제링크
https://colab.research.google.com/drive/1cr-IMsf26KUrRK4V75nsbcIYFId1eMVN?usp=sharing

0. 복습
1) 메소드(method) : 특정 객체가 가지고 있는 함수로 각 타입별 메소드가 별도로 존재함
		object명.method명(파라미터) 호출, 실행됨
		- 문자열 메소드
		- 불필요한 문자열 제거 메소드

2) 사용자 정의 함수 : 반복되는 코드, 행위, 기능들을 쉽게 관리하기위해서 선언해서 사용
		def 함수명(매개변수):
			실행할 문장
			return 반환값

	1) 함수정의 : 사용자 함수를 새로 만드는 것을 의미
	2) 인수 : 함수에 전달할 입력을 의미, argument
	3) 매개변수 : 인수를 받아서 저장하는 변수를 의미, parameter
	4) 반환값 : 사용자 함수의 출력을 의미, return
	5) 함수호출 : 만들어진 사용자 함수를 실제로 사용하는 것을 의미
		매개변수 x, 리턴값 x	=> 함수이름()
		매개변수 x, 리턴값 o	=> 함수이름(인수)
		매개변수 o, 리턴값 x	=> 변수 = 함수이름() / print(함수이름())
		매개변수 o, 리턴값 o	=> 변수 = 함수이름(인수1, 인수2) / print(함수이름(인수1, 인수2))

1. 람다함수
	사용자 정의함수와 비슷한 역할을 함
	이름없이 사용하는 함수를 익명함수
	간단한 기능을 정의해서 한 번만 사용하고 사라지게 됨

	함수명 = lambda 변수명 : 수식
	변수명 x, y, z등의 값을 사용
	수식은 변수명에서 사용된 값을 할당

 	간단한 수학함수가 필요한 경우 람다함수를 호출하여 사용

2. 맵함수
	반복가능한 데이터(목록, 사전 등)의 요소를 함수에 적용해서 결과를 반환하는 함수
	반복문을 간소화, lambda함수에 모든 값을 적용할 때 사용함

	결과값 = map(적용함수, 범위)

	map을 사용해서 범위에 대한 모든 값을 적용함수에 대입하여 모든 결과를 반환함

3. 필터함수
	반복가능한 데이터(목록, 사전 등)의 요소에서 특정 조건을 만족하는 값들만 추출함
	
	결과값 = filter(조건함수, 범위)
	조건함수는 논리값(True, False)을 반환하는 함수를 사용
	항상 True이 되는 값만 반환함

4. 변수
1) 지역 변수
	함수내부에서 선언한 변수
	함수 안에서만 사용가능

2) 전역 변수
	함수 밖에서 선언한 변수
	전체에서 사용가능

  전역변수 값을 함수 안에서 조회할 수 있고, global 키워드를 통해 함수안에서 전역변수를 바꾸어줄 수 있다
  하지만 바람직하지 않다!!!
  (1) 전역변수 이름을 어떤 것으로 지을지 예측 불가능
  (2) 함수 안에서 함부로 전역변수를 바꾸게 될경우 전체 코드에서 어떤 문제가 발생할 지 모르기 때문
	=> 매개변수로 값만 복사해서 사용하고 return 값으로 값만 복사하여 되돌려주는 방식을 사용함

5. 모듈
	파이썬 파일 => 변수, 함수, 클래스를 모아놓은 파일

	import 방법
	1) from 모듈 import 함수
	2) from 모듈 import 함수1, 함수2
	3) from import*
	=> import 모듈명

	* import 구문은 항상 코드의 맨 위에 작성한다!!!
	
	표준 라이브러리 홈페이지  https://docs.python.org/ko/3/library/index.html

	표준 모듈
	datetime : 날짜 시간
	calnedar : 달력
	time : 시간
	math : 수학
	random : 난수
	statistice : 통계
	io : 입출력

	외부 모듈
	패키지 = 모듈의 상위 개념
	외부에서 만들어진 패키지를 통해 패키지 내부에 있는 모듈을 사용
	pip 패키지 관리자
	
























