day02
과제풀이 -> 복습 -> 기본자료형(bool, str) -> 이스케이프문자 -> 입력함수 -> 형식을 갖춘 문자열 -> 연산자

0.복습

1) 컴퓨터 언어
	저급 언어 --- 인터프리터 --- 고급 언어

2) 파이썬
	귀도 반 로섬 1991년 개발
	인터프리터 방식의 프로그래밍 언어
	장점: 쉽다, 가독성이 높다, 빠른 개발속도, 다른 언어나 라이브러리에 쉽게 연동가능
	단점: 느린실행 속도, 모바일 앱개발에 적용하기 힘듦

3) 주석
	한달주석:#
	여러줄 주석: "~", """~"

4)변수와 변수명
	변수: 값을 저장하는 저장공간
	변수명: 저장공간 이름

4) 기본자료형-숫자자료형(int, float)

1.기본 자료형(Data Type)
	숫자 자료형	int
			float
	
	논리 자료형	bool	True	값이 있을 때
				False	값이 없을 때
	
	문자열 자료형	str	문자열	'abcd', "안녕하세요"

		인덱싱(indexing)
			문자열을 구성하는 모든 문자에 부여한 고유번호
			인덱스 시작번호는 0, 뒤에서부터의 시작번호는 -1
			특정문자를 추출하고자 할 때 사용함

		슬라이싱(Slicing)
			문자열의 인덱스를 활용해서 한 문자 이상으로 구성된 단어나 문자 추출
			슬라이싱
			str = "안녕하세요"
			str[시작값:종료값+1:증감값]

2. 키보드 입력함수
	input(): 키보드로부터 입력받기 위한 함수

3. 이스케이프 문자
	문자열 안에서 특수한 기능을 하는 문자
	\': '를 표현한다.
	\": "를 표현한다.
	\\: \를 표현한다.
	\n: 줄바꿈을 표현
	\t: tab을 표현

4. 형식을 갖춘 문자열
	% 연산자
		형식	지정자	
		int	%d	=>print(%d)%10
		float	%f	=>print(%f)%10
		str	%s	=>print(%s)%'10'
	
	.format()
		'문자열{}'.format(값)
		번호를 부여할 수 있으며, 별명도 설정 가능함

	f-string
		f'문자열{변수명}'
		따로 값을 넘겨줄 필요 없이 알아서 변수에 저장된 값을 중괄호 안으로 가져옴

		f-string을 사용하는 이유
		문자와 숫자를 +(연산자) 연결해서 출력할 수 있음

		ex) hour = 7
		print('나는'+hour+'시에 밥을 먹을거야') #오류
		print(f'나는{hour}시에 밥을 먹을거야)'

<복습>
1.기본 자료형
	int, float, bool, str
	str 인덱싱, 슬라이싱[start:stop+1:step]

2.입력함수
	input(): 자료형 str => 형변환을 해줘야 다른 자료형으로 변환 가능

3. 제어문자(이스케이프 문자)
	\'
	\"
	\n
	\t

4.형식을 갖춘 문자열
	%연산자 -%d, %f, %s
	.format() - '문자열{ }'.format(값)	
	f-string - f'문자열{변수명}'