day10

복습 -> 클래스

10일차 수업 예제 링크
https://colab.research.google.com/drive/1SyzAQDcflDmWWJTvN8Jass-ZcclvIuqd?usp=sharing

0. 복습
모듈 : 파이썬의 파일(.py) 모듈이 될 수 있음
	언제든지 사용할 수 있는 변수나 함수, 클래스등을 모아놓은 파일을 의미함
	
	코드의 맨 첫줄에 import 모듈명

변수
	지역변수 : 함수내에서만 사용가능
	전역변수 : 함수 밖에서도 사용가능

1. 클래스
1) 클래스(class) : 공통요소(변수, 함수)를 모아놓은 것
	class 클래스명:
	    def 메서드명(self, 매개변수1, ..):
		self.변수 = ...	#self.변수가 데이터를 나타내는 변수(데이터 속성)
		return 반환값

	- 클래스명 규칙 : 항상 첫글자가 대문자로 시작해야됨!!
	- 데이터 속성 : self.변수에 데이터가 될 값을 대입해서 사용하는 것
		       데이터 속성으로 데이터를 정의하는 것
	- 메서드 : 첫번째 매개변수를 self로 한 함수를 정의, 메서드로써 처리를 정의하는것
		=> 데이터속성 + 메서드 : 속성(attribute)
	- self : 클래스 내부에 선언된 메소드나 호출시 접근한 현재 객체를 매개변수로 함께 받아온다.
	         객체 구별용 변수

	1. 모든 클래스는 추상적
	2. 클래스는 타입 -> 선언되어 있는 것을 접근해서 가져와 사용

(ex) 자전거 공장
자전거를 만들기 위해 설계도 필요 => 클래스
공통된 요소(핸들, 바퀴, 안장, 체인) => 클래스 변수 : 공통적으로 가지고 있어야하는 공통의 값
	     1,     2,     1,     1
자전거의 색깔, 자전거의 금액 => 인스턴스 변수 : 찍어낼 수 있는 객체, 객체화가 되고 정해지는 값
생성자 : 인스턴스 변수들을 초기화 해주는 것, 객체화가 진행될 때

	클래스 : 설계도, 상상속에서 존재하는 것(붕어빵 틀, 삼각김밥 틀, 자전거 공장의 설계도면)
	객체(object) : 클래스(설계도)로 만들어지는 것(팥붕어빵, 피자붕어빵, 참치마요 삼각김밥, 두발자전거)
	클래스를 정의하고 "객체명 = 클래스명()" 선언되면 객체 하나가 생성됨
	인스턴스(instance) : 한마디로 객체
			클래스와의 관계를 표현할 때 인스턴스라는 말을 사용함

(ex) 자동차 클래스
객체 : 택시, 버스, 트럭
택시는 자동차 클래스의 인스턴스이다.

2) 인스턴스(instance) : 정의한 클래스를 실제로 이용하기 위함
		     클래스로부터 생성되는 각각의 존재가 인스턴스

	인스턴스명 = 클래스명()
	pr = Person()  #pr은 인스턴스를 나타냄

	- 데이터 속성, 메서드 이용
	  실제로 클래스로부터 인스턴스를 작성하고 데이터속성, 메서드를 이용하려면 .(피리오드)를 사용
	 
	- 속성
	  인스턴스명.데이터 속성명
	  인스턴스명.메서드명(인수목록)

	- 데이터속성, 메서드의 self
	  클래스 내부에는 self를 사용하지 않는 변수
	  메서드도 정의해서 사용가능
	  인스턴스를 통해 외부로부터 이용할 수 없음
    	  속성 self 지정을 잊으면 내부용 변수나 함수가 되므로 외부로부터 사용할 경우 오류가 발생
	  self는 인스턴스 자기자신을 나타냄

3) 생성자(constructor) : 인스턴스가 작성될 때 처음에 반드시 처리되는 메서드
		     선언시에는 어떤 클래스던 간에 똑같은 이름을 이용함

	def __init__(self, 변수1, 변수2,...):
		self.변수1 = 변수1
		self.변수2 = 변수2
	(ex) def __init__(self, name, age):
		self.name = name
		self.age = age
	pr = Person("김영선", 30)	#인스턴스 작성(name에 김영선, age에 30이 저장됨)

	생성자 목적
		1) 객체 생성
		2) 필드 초기화

4) 클래스 변수와 인스턴스 변수, 인스턴스 메소드
	(1) 인스턴스 변수
		인스턴스들이 각각 따로 저장하는 변수(self)

	(2) 클래스 변수
		모든 인스턴스들이 공유하는 변수
		-> 메모리 공간의 낭비를 막을 수 있음
		클래스 이름으로 접근하는것을 권장

5) 인스턴스 메소드와 클래스 메소드와 정적메소드
	(1) 인스턴스 메소드
		인스턴스 변수를 사용하는 메소드
		첫번째 매개변수는 객체 자신을 의미하는 self를 가짐
		인스턴스로 호출 가능

	(2) 클래스 메소드 
		@classmethod 데코레이터를 표시하고 작성
		인스턴스를 생성하지 않아도 호출 할 수 있으므로 인스턴스 변수 사용 불가
		클래스 변수를 사용하는 메소드
		첫번째 매개변수는 클래스를 의미하는 cls를 가짐
		인스턴스 또는 클래스로 호출 가능	

	(3) 정적 메소드
		@staticmethod 데코레이터를 표시하고 작성
		인스턴스 변수와 클래스 변수를 모두 사용하지 않는 메소드를 정의할때
		(외부 상태에 영향을 끼치지 않는 함수를 만들때)
		반드시 작성해야 하는 매개변수가 없음
		인스턴스 또는 클래스로 호출 가능
		-> 인스턴스에 영향을 주지 않고 인스턴스로부터 영향을 받지 않음


인스턴스 변수				클래스 변수
인스턴스마다 다른값  		공유하는 값 
인스턴스 접근(O)			인스턴스 접근(O)
클래스 접근(x)			클래스 접근(O)
	

인스턴스 메소드		클래스 메소드			정적 메소드
인스턴스 호출(O)		인스턴스 호출(O)		인스턴스 호출(O)
클래스 호출(x)		클래스 호출(O)		클래스 호출(O)














			