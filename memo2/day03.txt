day03
복습 -> 예외처리 -> 파일입출력 -> 크롤링 개념 -> 크롤링

3일차 수업예제 링크
https://colab.research.google.com/drive/1EfO5D7hD_LjeXDulyYc-SW0DgacXnCuJ?usp=sharing

1. 예외처리(Exception Handling)
	- 파이썬에서 각종 오류를 처리하기 위함
	- 예외발생했을 때 프로그램이 정상적으로 종료될 수 있도록 다루는 행위
	- 예외 : 개발자가 직접 처리할 수 있는 간단한 문제
	  오류 : 개발자가 처리할 수 없는 복잡한 문제(ex : 화재, 자연재해,..)

1) 예외처리의 필요성
	- 발생된 문제로 인해 프로그램이 비정상적으로 종료되는 것을 막고
	  사용자에게 발생한 문제에 대한 정보를 전달하기 위함

2) 예외처리 구조
① try ~ except
	try:
		예외가 발생할 수 있는 문장
	except:
		예외 발생시에 수행할 문장

② except ~ else ~ finally
	except:
		기타 예외 발생 시 처리되는 문장
	else:
		예외가 나지 않으면 수행할 문장
	finally:
		예외 발생유무에 상관없이 무조건 수행할 문장


+) try(해당 구문안에서 에러 발생시 처리가능 - 필수)
    except(에러 발생시 수행 - 선택적이지만 에러를 처리하기 위해서 필수)
    else (에러 없을 때 수행 - 선택적이지만 except 없이는 올 수 없음)
    finally(에러가 있거나 없거나 상관없이 항상 수행 - 선택)

3) 강제로 예외 발생시키기
	- 사용자가 발생시키고 싶은 경우에 사용
③ raise 예외클래스()	#예외클래스는 Exception 또는 Exception을 상속받은 나의 클래스
	또는
  raise 예외클래스("문장")


2. 파일입출력
1) 기본입출력
	print() , input()
- 파일입력(input) : 기존의 파일 내용을 읽어들어는 것
- 파일출력(output) : 기존 파일에 새로운 내용을 추가하거나 새로운 파일을 생성하는 것

① open~close문
	1. 파일 열기
	   파일객체(f) = open(파일명, 모드, 인코딩 방식)
	2. 파일 객체를 이용해 파일을 읽거나 쓰기
	   파일내용 읽기
	   변수 = 파일객체명.read()
	   data = f.read()

	   파일내용 쓰기
	   파일객체명.write(str)
	   f.write(str)
	3. 파일객체 닫기
	   f.close()	#파일닫기

2) 정리
- 파일명
	open('test1.txt')
	open('D:/1900_python2_kys/workspace/text1.txt') #절대경로로 작성
	open('./text1.txt')	#상대경로 ./ 현재폴더를 의미
	open('../../test1.txt')	#상대경로 ../ 상위폴더를 의미

- 옵션(모드)
	파일열기모드로 여는 파일의 속성을 지정함
	r : 읽기모드, defalt
	w : 쓰기모드, 파일이 없으면 만들겠다 있으면 덮어씀
	a : 쓰기모드, 파일이 없으면 만들겠다 있으면 맨 뒤에 이어서 씀
	x : 쓰기모드, 파일이 없으면 만들겠다 있으면 오류
	t : 텍스트모드, 우리 눈에 읽힘
	b : 바이너리모드, 음성, 이미지, 영상

- encoding
	텍스트 파일의 인코딩 방식 지정
	지정하지 않으면 기본 인코딩 방식으로 텍스트 파일을 열게됨

② with(with statement)문 이용한 파일 생성
	- 내장함수 open(), close()메소드를 사용해서 작성하면 close() 마지막에 작성하지 않아
	  문제 발생가능성이 높음
	- with문을 사용하면 파일을 열고 도중에 처리가 종료되더라도 반드시 파일이 닫힘

	with 처리 as 파일 변수:
		f.write(str)
		#파일내용 쓰기, ()안에는 항상 문자열로만 작성가능함

3) 파일 읽기 메소드
	- read(사이즈) : 사이즈를 생략하게 되면 다 읽음
	- readline() :  한줄을 다 읽는 함수, 파일 끝에 도달하면 리턴
	- readlines(수) : 줄단위로 리스트에 저장하여 리턴
			 누적으로 읽은 글자수가 '수'를 넘어가면 종료

4) csv파일
	- 데이터를 , (콤마)로 구분한 형식을 말함
	- 스프레드 시트나 데이터베이스에서 자주 이용됨
	- csv파일 모듈을 이용해야함 -> import csv

	- csv모듈의 주요 함수 및 메소드
	  write(파일) : 라이터 인스턴스를 얻는다
	  reader(파일) : 리더 인스턴스를 얻는다
	  라이터.writerow(시퀀스) : CSV 파일에 1행으로 써넣는다
	  라이터.writerows(시퀀스) : CSV 파일에 여러 행으로 써넣는다

3. 크롤링
	- 크롤링 : 여러 웹 페이지를 기계적으로 탐색하는 것
	- 스크래핑 : 특정한 하나의 웹페이지를 탐색하고, 소스코드 작성자가 원하는 정보를
			콕 집어 얻어내는 것
	=> 완성된 웹 페이지에서 필요한 정보를 수집하여 추출하는 과정

	** 크롤링 시 주의 사항 **
	 웹서버에 과부하 문제를 유발할 수 있고 그로 인해 법적 문제가 발생할 수 있음!!
	 웹사이트에 접속 후 robots.txt파일을 확인할 것!!
	 
	https://namu.wiki/w/robots.txt
	https://www.google.com/robots.txt
	http://www.naver.com/robots.txt
	
	- robots.txt : 검색로봇 또는 검색엔진 크롤러에게 사이트 및 웹 페이지를 수집할 수
			있도록 허용하거나 제한하는 국제 권고안

	특정 경로의 접근을 허용
	Allow : /naver.com/test
	
	특정 경로의 접근을 차단
	Disallow : /naver.com/test2

	모든 경로 접근을 허용
	Allow: /

	모든 경로 접근을 차단
	Disallow: / 

	첫페이지만 접근 허용, 나머지는 접근 차단
	User-agent: *
	Disallow: /
	Allow : /$ 

	$ : 홈디렉터리

1) 웹 크롤링 방법
	순서1) 웹 페이지의 정보를 가져온다.(requests 라이브러리 사용)
	순서2) HTML 소스를 파싱(=분석)하여 원하는 정보를 얻는다.(BeautifulSoup 라이브러리 사용)

 - 사용자는 브라우저로 접속하고 싶은 주소 입력(www.naver.com)
 - 브라우저가 해당 주소의 서버에게 정보를 달라고 요청(request)
 - 웹서버는 구성에 필요한 정보를 코드형태(HTML)로 전달(response)
 - 브라우저는 전달받은 코드를 해석해서 사용자 화면에 예쁘게 보여줌

	=> 웹서버에서 홈페이지에 내용을 보낼 때 HTML 전달한다!!!
	   F12(개발자도구) 누르면 구성정보가 나오는 것으로 확인 가능함

2. 웹 크롤링 하기 전 알아야하는 사전지식
1) 웹 / 인터넷
  - 웹 : 자동차 / 인터넷 : 도로
① 웹(Web)
	- World Wide Web의 줄임말, www
	- 인터넷에 연결된 컴퓨터를 통해 정보 공유
	- 인터넷 상에 동작하는 서비스
	  ex) E-Mail, FTP(파일공유), Telnet(원격접속) 등

② 인터넷(Internet)
	- 물리적으로 떨어져있는 서버와 서버를 연결해주는 것
	- TCP/IP 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크
	- TCP : 서버와 클라이언트 간에 데이터를 신뢰성있게 전달하기 위해 만들어진 프로토콜
	- IP : Internet Protocol의 줄임말 / 인터넷 연결시에 IP주소를 받아온다는 표현시 사용

③ URL(Uniform Resource Locator)
	- 어떤 자원의 위치를 표기하는 방법을 의미
	  ex) www.naver.com
	=> https://www.naver.com:443/
	  프로토콜 :// 도메인:포트번호/경로
	프로토콜 : 하이퍼텍스문서를 전송할 때 사용하는 프로토콜(통신규약-약속)
	도메인 : 사이트 명
	포트번호 : 기본포트 80(생략)
	
	기본적으로 '파라미터 = 값' 형식으로 전달
	정보가 여러개인 경우 &를 이용하여 '파라미터명 = 값&파라미터명 = 값' 형식으로 전달
	
	요청파라미터 	값
	where 		nexearch
	sm		top_hty
	fbm 		1
	ie		utf8		#인코딩
	query		파이썬		
	query		%ED%8C%8C%EC%9D%B4%EC%8D%AC

2) 웹 서버와 웹 클라이언트
	- 요청(Request) : 웹 클라이언트가 웹서버에 필요한 정보를 요구하거나 처리해달라고 부탁하는 행위
			(웹에서 발생하는 HTTP요청)
	- 응답(Response) : 웹 클라이언트의 요청을 수신받고 필요한 데이터를 전달하는 행위
			(웹에서 발생하는 HTTP응답)

3) HTML
	- HTML(Hyper Text Markup Language) : 웹 페이지를 만드는 문법을 갖춘 언어(웹페이를 구성하는 언어)
	- 태그로 이루어져있음 <html> </html>
		- 태그(Tag) : 옷에 붙어 있는 태그, 어떤 의미를 지니고 있다는 뜻
		- 여는태그 : 요소의 이름과 열고 닫는 꺽쇠 괄호로 구성 <요소이름>
		- 닫는태그 : 요소의 이름과 열고 닫는 꺽쇠 괄호로 구성 </요소이름>
		- 내용(content) : 요소의 내용, 단순한 텍스트
		- 요소(element) : 여는 태그, 닫는태그, 내용 통틀어 이르는 말


① HTML 기본적인 구조
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>My test page</title>
  </head>
  <body>
    <p>This is my page</p>
  </body>
</html>

<!DOCTYPE html> : 문서형식을 나타냄
<html></html>	: <html> 요소, 전체 페이지의 콘텐츠를 포함, 기본요소
<head></head>	: <head> 요소, 홈페이지 이용자에게는 보이지 않지만 검색 결과에 노출될 키워드
		  홈페이지 설명, CSS 스타일 등 HTML 페이지의 모든 내용을 담고 있음
<meta charset="utf-8"> : HTML 문서의 문자 인코딩 설정, UTF-8 지정
<title></title>	: <title> 요소, 페이지 제목 설정, 페이지가 로드되는 브라우저 탭에 표시되는 제목으로 사용됨
<body></body>	: <body> 요소, 텍스트, 이미지, 비디오, 게임, 재생 가능한 오디오 트랙등 페이지에 표시되는
		  모든 콘텐츠 포함
<!--'내용'-->	: HTML 주석(python #)

② HTTP 메서드
	- GET : 리소스요청(크롤링 주로 사용) => 받아들이는 녀석
	- POST : 대기 리소스 추가 요청이나 수정/삭제 목적으로 사용(크롤링 주로 사용)
		=> 내가 추가로 요청하는 녀석
	- PUT : 리소스 수정 요청
	- DELETE : 리소스 삭제 요청
	- OPTIONS : 웹서버가 지원하는 메서드 종류 반환 요청
	- TRACE : 클라이언트(사용자)의 요청을 그대로 반환

③ HTTP 요청 /응답 패킷 형식
	- 요청패킷
	  요청 헤더 : 클라이언트에서 필요한 헤더 (Key / Value 를 세팅후 요청, 전달)
	  첫번째 빈줄 : Header와 Body 구분자
	  Body : 클라이언트에서 필요한 Body를 세팅후 요청, 전달

	- 응답패킷
	  응답 헤더 : 서버에 필요한 key/value를 세팅 후 응답, 전달
	  첫번째 빈줄 : Header와 Body 구분자
	  Body : 서버에서 필요한 Body를 세팅한 후 요청, 전달

	- 요청(클라이언트) vs 응답(서버)

④ HTTP 응답코드
	- 1XX : 요청되었으며 현재 작업중입니다.
	- 2XX : 요청이 성공적으로 수행되었습니다.
	- 3XX : 요청이 완료되었으나 리다이렉션이 필요합니다.
	- 4XX : 사용자의 요청이 잘못되었습니다.
	- 5XX : 서버에 오류가 발생했습니다.

4)모듈, 패키지, 라이브러리
	- 모듈 : 구성단위, 전역변수 및 함수등을 모아둔 파일
	- 패키지 : 특정 기능과 관련된 여러가지 모듈들의 집합(폴더)
	- 라이브러리 : 모듈과 패키지가 합쳐진 것을 의미, 기본 라이브러리와 외부 라이브러리로 나뉨

3. 웹 크롤링 패키지
① requests : 파이썬에서 동작하는 작고 빠른 브라우저
	- 웹 사이트 요청을 쉽게 처리할 수 있는 라이브러리
	- html 문서를 가져올 때 사용하는 패키지
	- python에서 HTTP 통신을 할 때 가장 자주 쓰이는 패키지, 열기과정에서 사용 가능
	
  	- 사용방법
	  VS CODE : 터미널에서 pip install requests 설치 후에 import requests
	  colab : import requests





















