day05

과제풀이(크롤링 1번) -> 복습 -> 셀레니움 -> 데이터 분석패키지(넘파이, 판다스, 맷플로립)

5일차 수업예제
https://colab.research.google.com/drive/1LQGDrGFLtj1mI8oranjnpM31qQn0_d16?usp=sharing


0. 복습

1) requests, BeautifulSoup
2) robots.txt 꼭 확인해서 진행할것
3) 헤더 추가하기=> 상태코드가 200이 아닐때

1. 셀레니움
	- 웹 애플리케이션 자동화 및 테스트를 위한 프레임워크
	- 동적 페이지를 크롤링 하기 위해 사용함
	#셀레니움의 webdriver를 사용하기 위해 import
	from selenium import webdriver
	#셀레니움으로 키를 조작하기 위한 import
	from webdriver_manager.chrome import ChromeDriverManager
	
1) 비주얼 스튜디오 코드
① 크롬 드라이브 확인 후 크롬 드라이브 다운로드 > 경로 상에 넣어주기
② 터미널에서 pip install selenium / pip install webdriver-manager 설치 후 진행
③ 코드 작성 시 작성

import requests
from selenium import webdriver
from bs4 import BeautifulSoup as bs
from webdriver_manager.chrome import ChromeDriverManager
import csv

driver = webdriver.Chrome(ChromeDriverManager().install())
driver.get("https://vibe.naver.com/chart/total")	#크롤링하고자 하는 사이트 주소 입력

④ 원하고자 하는 부분 HTML의 태그 확인 후 추출

2) 코랩
① 크롬 드라이브 확인 후 크롬 드라이브 다운로드 > 코랩 상에 넣어주기
② 코드 처음부분에 작성
!pip install Selenium
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver

#패키지 호출
import requests
from bs4 import BeautifulSoup as bs
from selenium.webdriver.common.keys import Keys
from selenium import webdriver

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless') #내부 창을 띄울 수 없으므로 설정
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

wd = webdriver.Chrome('chromedriver',chrome_options=chrome_options)
wd.get("[https://vibe.naver.com/chart/total](https://vibe.naver.com/chart/total)")	#크롤링하고자 하는 사이트 주소 입력

③ 원하고자 하는 부분 HTML의 태그 확인 후 추출

+) html 요소 선택 메소드
요소 선택 기준			
처음 1개 요소 추출

.find_element			

모든 요소 추출

.find_elements

css선택자가 ''인 요소 추출

.find_element_by_css_selector('')
.find_elements_by_css_selector('')

id가 ''인 요소추출

.find_element_by_id('')
.find_elements_by_id('')

class가 ''인 요소 추출

.find_element_by_class_name('')
.find_elements_by_class_name('')

tag가 ''인 요소 추출	

.find_element_by_tag_name('')
.find_elements_by_tag_name('')

xpaht가 ''인 요소 추출

.find_element_by_xpath('')
.find_elements_by_xpath('')

+) 동작 메소드

동작				코드
'요소'클릭			.click('')
'요소'더블 클릭			.double_click('')
'텍스트'입력			.send_keys('')
'요소'에 '텍스트' 입력		.send_keys_to_element('','')
'요소'로 마우스 이동		.move_to_element('')
스크롤 내리기			.execute_script("window.scrollto();")
실행				.perform()

2. 데이터 분석 패키지
	- 목적에 맞는 패키지를 설치 한 후 진행해야함
	  (패키지 : 하나의 디렉터리에 모아놓은 여러 모듈의 집합)

	-넘파이(Numpy) : 배열 계산기능, 반올림, 버림 기능  floor, celi, power
	-판다스(Pands) :데이터 프레임으로 데이터를 입력, 가공  groupby, describe
	-맷플로립(Matplotlib) : 그래프 그리기 기능	plot(), bar() 등
	+) 수학(math), 통계모델 작성 분석(ststmodels),...

설치방법
	vs code 터미널 pip install numpy
		     pip install pandas
사용방법
	import numpy as np
	import pands as pd

3. 배열구조(Array)
	- 배열은 하나의 자료형을 기준으로 순서가 있는 원소로 나열된 자료구조
	- 파이썬에서 순차적으로 원소를 나열하는 배열형태의 리스트(list)를 제공

1) list 구조
	- 순서를 가지고 일렬로 나열된 원소들의 모임
	- 크기가 변할 수 있는 동적할당
	- [1, 'str', 0.5] 모든 자료형의 타입을 보존함(여러가지 자료형을 허용)
	- 2차원 이상의 배열구조일 경우 내부 배열에서 원소의 개수가 달라도 됨
	  [[1, 2], [3, 4, 5], 1, 4]
	- list1 + list2 => list1에 list2가 연결되서 하나의 리스트로 출력
	- list1 * int => list1 * int 반복

2) 넘파이 배열구조
	- 다차원 배열인 ndarray 클래스의 객체, 하나의 자료형으로만 만들어진
	  원소들을 보관
	- 고정된 크기를 갖는 정적할당
	- 숫자형과 문자열이 섞이게 되면 모두 문자열로 전환됨(한가지 자료형만 허용)
	- 내부 배열 내 원소 개수는 모두 같아야함
	- 넘파이 배열 +,- 넘파이 배열 => 원소끼리 계산됨
	  넘파이 배열 /,* 넘파이 배열 => 원소끼리 계산됨

4. 넘파이(Numpy)
	- 수치 연산을 빠르게 할 수 있는 수치 해석을 위한 라이브러리
	- 배열을 표현하기 위한 패키지(숫자로 된 큰 배열 데이터를 다룰 때 사용)
	- 데이터 사이언스, 빅데이터 분석, 머신러닝, 딥러닝 필수적
	- 넘파이 공식문서
	  https://numpy.org/doc/stable/

1) 특징
	- 컴퓨터 과학을 위한 기본적인 패키지
	- n차원 데이터를 빠르게 처리
	- c, c++, 포트란
	- 선형대수학을 빠르게 계산

2) 기본 개념(R분석)
	- 스칼라 : 값이 하나만 있는 데이터 
	- 벡터 : 하나의 행이 있는 데이터
	- 매트릭스 : 행과 열이 있는 데이터

3) 넘파이 객체의 속성(메소드-> 객체.메소드명)
	.shape : 배열의 각 차원의 크기, 튜플형태 표현
	(ex) n행 m열이 행열의 경우 (n, m)형태로 출력
	     3 x 5 => 3행 5열 => (3, 5)
	.ndim : 배열의 차원수 or 배열의 축의 개수
	.dtype : 배열의 각 원소(요소) 타입
	(ex) numpy.int32, numpy.float64 등
	.size : 전체 원소(요소)의 개수

4) 넘파이 함수(np.함수명())
	range()	: 정수로만 만들수가 있음
	arange() : 실수로도 만들수가 있음, 연산도 가능
	np.arange() : 특정 범위에 있는 원소를 자동 생성하기(연속성 정수 생성)
	np.astype() : 배열의 원소가 가지는 유형을 바꾸는 함수
	np.zeros((행, 열)) : 원소가 0으로만 이루어진 배열 만들기
	np.ones((행, 열)) : 원소가 1로만 이루어진 배열 만들기
	np.transpose() : 행과 열을 바꾸기
	np.append(배열1, 배열2, 축) : 이어붙이기 함수
		axis = 0 첫번째 축, axis = 1 마지막 축
		axis 설정 시 두 배열의 차원이 일치하지 않으면 ValueError가 발생
		append()와 다르게 차원이 같아야만 붙일 수 있음

	+) insert, append, delete 가능하지만 리스트와 달리 값을 변수에 재할당해야함










