day07
복습 -> 데이터 프레임 -> 데이터 시각화 -> 자료구조 알고리즘 기본개념


1. 판다스(데이터 프레임)
1) 데이터 프레임 값 수정, 추가, 삭제
	①수정
	df['새로운 행 또는 열 이름'] = 값

	rename(): 데이터 프레임 자료형에서 제공하는 함수
	옵션(, inplace = True) 바로 df에 저장됨
	.rename(colums ={변경전 열 이름: 변경할 열 이름}, inplace = True)
	.rename(index ={변경전 행 이름: 변경할 행 이름}, inplace = True)

	②추가
	df['새로운 열 이름 또는 새로운 행 이름'] = 값 #기존에 있는 열이름이면 덮어씀, 마지막에 추가됨

	③삭제
	-행삭제
		df.drop(행 인덱스)
	-열삭제
		df.drop(인덱스 라벨,  axis = 0 ir inplace =True)
		#axis 옵션: 행인덱스일 경우 0(디폴트값), 열 삭제일 경우 1 or 'colums'
		#inplace 옵션: 원본에서 삭제 적용시 True


2) 행 선택(loc, iloc)
	loc(label location): 인덱스 이름 기준으로 행 데이터 읽기
	.loc[행 인덱스 라벨, 열 인덱스 라벨]

	iloc: 행 번호를 기준으로 행 데이터를 읽기(정수형 위치 인덱스 사용할 때)
	.iloc[행 인덱스, 열 인덱스]

3) 열 선택
	-결과값으로 시리즈 객체
	df.'colum_name'
	: 열이름이 숫자로 시작하지 않고 공백이나 특수문자 등을 포함하지 않는 조건을 만족해야함

	df.['column_name']
	: 딕셔너리에서 key를 선택해서 value를 불러오는 것과 동일

	- 결과값으로 데이터 프레임을 반환
	df.[['column_name']]
4) 추가적인 부분(개인적으로 공부)
   - 합계
      df.sum()
   - 평균
      df.mean()
      numeric_only 옵션 : True일 경우 숫자나 불(bool) 값만 있는 열에 대해서만 연산
   - 정렬
      오름차순 정렬 : df.sort_values(by='기준컬럼')
      내림차순 정렬 : df.sort_values(by='기준컬럼', ascending = False)
   - 조건식
      비트연산자 사용 (&(and), |(or), ~(not))
   - 슬라이싱([start:end:step])
      df.iloc[행 정수형 위치 인덱스, 열 정수형 위치 인덱스]
      df.loc[행 인덱스, 열 컬럼]
      정수형 인덱스는 범위 끝이 포함되지 않으나 문자열을 사용하면 끝이 포함됨
   - 파일변환(csv)
      읽기 : pd.read_csv('파일명')
      쓰기 : pd.to_csv('파일명')
   - 파일변환(excel)
      읽기 : pd.read_excel('파일명')
      만약 에러나면 engine = 'openpyxl' 옵션 추가
      쓰기 : pd.to_excel('파일명')

2. 데이터 시각화
	 -데이터를 분석한 결과를 사용자가 쉽게 이해할 수 있도록 표현하여 전달하는 것
		(다양한 그래피 등으로 출력)

1) 데이터 시각화 필요성
	- 많은 양의 데이터를 한번에 볼 수 있음
	-전문지식이 없어도 데이털르 인지하고 사용할 수 잇음
	-단순한 데이터의 나열보다 정확한 분석결과를 얻을 수 있음
	-단순한 데이터상에서 알 수 없는 둥요한 정보들을 얻을 수 있음

2) 파이썬 데이터 시각화
	- R언어로 많이 사용(파이썬보다 느리고 메모리 많이 소모)
	- 다양한 라이브러리 사용 가능

3) matplolib
	- 다양한 데이터들을 많은 방법으로 도식화 할 수 있는 파이썬 라이브러리

4)matplolib 사용

(1) 설치 및 실행

(2)기본 개념
	import matplotlib.pylot as plt
	
	figure: 그래프의 전체 영역
		-> figure()
	subplot: 실제 그래프를 그리는 영역, 하나의 figure에 여러개의 subplot이 포함 될 수 있음
		->add_subplot()

(3)기본 사용법
	import matplotlib.pylot as plt
	figure = plt.figure()
	axes = figure.add_subplot(행,열,번호)
	특이사항: figure는 전체, subplot 몇 개인지는 figure.add_subplot()에서결정

 (4) plot()함수
   - 꺾은 선형그래프를 그리는 함수
   - plot(x, y) x축에서 사용할 데이터와 y축에서 사용할 데이터를 각각 리스트로 만든 뒤 인수로 전달
   
(5)한글깨짐 설정 방법(windows)
	- matplotlib에서는 한글 사용 시 깨져서 표시됨
	- font-manager, rc를 이용해서 사용하고자 하는 한글 폰트를 등록시 해결가능
	- C:\windows\fonts => ctrl+f 맑은 고딕 검색 -> 속성 -> malgun.ttf
	-사용방법
	vs code	
		from matplotlib import font_manager.rc
		import matplotlib.pyploy as plt
		font_path  ='경로/폰트명'
		font_name = font_manager_FontProperties(fname =- font_path).get_name()
		plt.rc('font',family = font_name)

(6)bar()
	-범주가 있는 데이터 값을 직사각형의 막대로 표현하는 그래프(막대그래프)
	-어떤 데이터의 많고 적음을 나타낼때 주로 사용
	 xlabel(): x축의 이름 지정
	 ylabel(): y축의 이름 지정
	 title(): 그래프 제목 지정

(7) scatter()
	- 산포 그래프
	- 어떤 두 변수 사이의 상관관계를 나타낼 때 사용
	- 옵션
		s: 각 점의 크기 결정
		c: 각 점의 색상을 지정

(8) pie()
	- 원형그래프
	- 각 항목의 비율을 나타낼 때 사용
	- 옵션
	  legen(): 범례 표시
	  (label = 데이터, loc = 위치)
	 튜플형태로 좌표 부여가능(0.0,0.0)
	 lower right 문자열로 부여가능(기본값은 best -> 최적의 위치)

3. 자료구조와 알고리즘
1) 자료구조와 알고리즘을 배우기 전에
-취업 / 대회 준비하는 사람들의 알고리즘 학습순서

-기본 전제 조건: 언어의 문법을 정확히 알고 있어야 한다.
	문자열과 1차원, 2차원 리스트의 삽입, 수정, 슬라이싱 등 다루는 기법,
	문자형과 정수형, 변수 사이 형변환

2) 자료구조
	컴퓨터
		판정, 선택, 응답, 기억의 네가지 주요회로로 구성된 기계
	프로그래밍
		문제해결을 위하여 수행할 작업을 단위 작업으로 나누고,
		어떻게 수행해야 문제를 해결할 수 있는지 연구하는 것
	코딩
		프로그래밍 된 것을 특정 언어로 번역하는 과정
	단위작업
		개발자 입장에서 더이상 분해할 수 없는 기본작업
		(ex) 사용자의 로그인과정, 입력된 데이터의 검증 작업 등
	자료구조
		자료처리를 위해서 컴퓨터가 잘 다룰 수 있는 형태로 표현하는 구조
	알고리즘
		문제를 해결하는 절차 또는 순서
		프로그래밍에서 문제 해결을 위해 단위 작업을 어떤 순서로 어떻게 반복하면
		효과적으로 해결할 수 있는지 연구하는 분야
		주어진 문제를 단위작업으로 나누고 이것의 진행순서나 절차를 흐름도를 이용해서 표현함

	*컴퓨터 프로그램? => 어떤 데이터를 처리하고 그 결과를 제공
	 데이터 -> 자료구조를 이용해서 표현
	 데이터를 이용해서 주어진 문제를 처리하기 위한 표과적인 절차 -> 알고리즘
	
	*영어사전에서 특정한 단어를 찾는 방법(알고리즘) python
	1) a-> python단어가 나올때까지 쭉 찾는방법
		=> 확실하긴 하지만 시간이 많이 걸림
	
	2) python 맨 첫글자인 p를 찾고, y를 찾고, ... python
		=> 알파벳이 정렬되어 있는 순서를 알고 찾는 방법이기때문에 시간을 단축할 수 있음

	알고리즘 조건
	입력: 0개 이상의 입력이 존재해야한다
	출력: 1개 이상의 출력이 존재해야한다
	명백성: 각 명령어의 의미는 모호하지 않고 명확해야한다.
	유한성: 한정된 수의 단계 후에는 반드시 종료되어야한다.
	유효성: 각 명령어들은 실행가능한 연산이어야한다.




	