day02
복습 -> 모듈 -> 클래스 -> 상속

2일차 수업 예제링크
https://colab.research.google.com/drive/18-OP1jdZ-enF6hQ4BgNTETQxkIbEHZaY?usp=sharing

1. 모듈
	- 파이썬의 파일(.py)은 모듈이 될 수 있음
	- 언제든지 사용될 수 있는 변수나 함수, 클래스들을 모아놓은 파일을 의미
	- 별칭 사용
	   import 할 때 모듈명(이름)대신에 별명(alias)을 지정하고 사용하는 것을 의미
	   as 키워드를 이용해서 사용
	   (ex) import random as r

1) 표준모듈
	- import해서 사용 가능

2) 외부모듈
	- vs code : 터미널에서 pip install 모듈명
	- import 해서 사용 가능

2. 사용자 정의함수
	- 코랩에서 1부터 매개변수로 받은 숫자까지 총합구하기

3. 클래스
1) 클래스 기본 개념 정리
   함수(function)
	특정 기능을 수행하는 코드의 묶음
        (ex) print() : 출력기능, input() : 입력기능
   클래스(class)
	여러 변수와 함수(메서드/메소드)를 묶어서 처리할 수 있는 것
   데이터속성(data attribute)
	데이터 속성으로 데이터를 정의하는 것
	(self.변수에 데이터가 될 값을 대입해서 사용가능)
   메서드(method)
	메서드로서 처리를 정의하는 것
	(첫 번째 매개변수는 항상 self로 시작)
   속성(attribute)
	데이터 속성 메서드를 합쳐서 부르는 말
   객체(object)/인스턴스(instance)
	정의한 클래스를 실제로 이용하기 위해 사용
	클래스로부터 생성되는 각각의 객체가 인스턴스

2) 클래스와 객체
   class : 똑같은 무엇인가를 계속 만들어 낼 수 있는 설계도면(붕어빵 틀, 쿠키 틀)
   object : class에 의해서 만들어진 결과물(팥붕어빵, 슈크림붕어빵 / 초코칩 쿠키, 아몬드 쿠키 등)

	- 객체는 속성(상태, 특징)을 가지고 있으며 행위(행동, 동작, 기능)를 할 수 있는 대상
	- 객체의 속성은 변수로 구현, 행위는 메서드로 구현
	- 객체를 사용하기 위해서 클래스를 먼저 선언해야 함!!
	- 규모가 큰 프로그램을 작성하거나 유사한 객체가 많은 프로그램을 만들 때 객체 지향 프로그래밍
	  기법으로 코드를 좀 더 편리하고 효율적으로 작성 가능

3) 클래스 선언
	class 클래스명:
	#필드(변수, 메서드)
	    def 메서드명(self, 매개변수):	#메서드
	        self.변수 = 		#데이터 속성
		return 반환식
	self : 객체 구별용 매개변수(인스턴스 자신을 나타냄)
		self.필드명으로 접근하면 여러 객체도 한번의 선언으로 구별하여 다룰 수 있게됨

4) 클래스 사용
	- 추상적인 개념의 클래스로 객체를 만드는 작업을 "객체화"라고 함
	[객체화]
	객체명 = 클래스명() 	
	[각필드에 접근]
	객체명.변수명
	객체명.메서드명()
	
+) 클래스는 추상적인 개념이고 실체화되어 있지 않기 때문에 객체를 생성하고 그 객체를 사용함
   클래스의 필드와 동일하게 생긴 하나의 필드와 복사되면 그 필드안에는 여러 값들이 존재할 수 있음
     하나의 저장공간에는 한개의 값만 담을 수 있기 때문에 객체는 생성된 필드의 주소값을 가지고 있게 됨

5) 생성자(constructor)
	- 인스턴스가 작성될 때 처음에 반드시 처리되는 메서드
	- __init__으로 사용(init : initialize) 처음에 초기화를 시켜준다는 의미
	- 클래스를 통해서 객체를 생성하는 순간에 호출되는 특별한 메서드
	- 형식
		def __init__(self, 매개변수,..):
		    self.변수1 = 변수1
		    self.변수2 = 변수2

6) 클래스 변수와 인스턴스 변수
	- 클래스변수 : 모든 인스턴스가 동일한 값을 사용할 때 모든 인스턴스들이 공유할 수 있는 변수
	- 형식
		클래스명.클래스 변수
	- 인스턴스 변수 : self라는 키워드를 붙여서 사용함
	- 형식
		객체.인스턴스 변수
	
	Q) 클래스.인스턴스 변수 사용=> 오류 발생한다


7) 클래스 메서드와 정적 메서드
	- 클래스 메서드 : 클래스 변수를 사용하는 메서드 의미
			self를 사용하지 않기 때문에 인스턴스변수에는 접근을 할 수 없지만,
			cls 통해서 클래스 변수에 접근 할 수 있다.
	  인스턴스나 클래스로 호출
	  생성된 인스턴스가 없어도 호출가능
 	  @classmethod 데코레이터를 표시하고 작성
	  첫번째 매개변수는 self를 사용하지 않고 cls를 사용

	- 정적 메서드 : self를 사용하지 않기 때문에 인스턴스 변수를 사용할 수 없다
		      인스턴스를 생성하지 않아도 사용할 수 있다는 점에서 클래스 메서드와 유사
	  인스턴스 또는 클래스로 호출
	  생성된 인스턴스가 없어도 호출 가능
	  @staticmehd 데코레이터를 표시하고 작성
	  반드시 작성해야할 매개변수 없음

2. 상속
	- 기존에 사용중인 클래스를 바탕으로 새로운 요소를 추가해서 클래스를 다시 정의하는 것
	  (클래스를 확장한다)
	- 새로운 클래스는 기존 클래스의 데이터속성, 메서드를 상속받는 구조로 되어있음
	- 기존 클래스에 새롭게 필요한 데이터속성, 메서드를 추가해서 코드를 작성 가능(상속, 계승)

	구분	부모클래스		자식클래스
	의미	상속해 주는 클래스	상속을 받는 클래스
	용어	슈퍼클래스		서브클래스
		기반클래스		파생클래스

1) 서브 클래스의 정의
	- 형식
	class 슈퍼클래스명:
		def __init__(self, 매개변수):	#슈퍼클래스의 생성자
						
		def 슈퍼클래스에 추가할 메서드(self, 매개변수,..):
			self.슈퍼클래스에 추가할 데이터 속성 = 값

	class 서브클래스명(슈퍼클래스명):
		def __init__(self, 매개변수):	#서브클래스의 생성자
			super().__init__()

		def 서브클래스에 추가할 메서드(self, 매개변수,..):
			self.서브클래스에 추가할 데이터 속성 = 값	

2) 상속관계 구현

	- IS - A 관계를 구현해야함
	=> ~은 ~이다. 해석할 수 있는 관계를 의미함
	(ex) 학생은 사람이다.
	Student is Person
	서브클래스 슈퍼클래스

3) 서브클래스의 __init__()
	- 서브클래스는 슈퍼클래스가 없으면 존재할 수 없음
	- 서브클래스의 생성자를 구현할 때는 반드시 슈퍼클래스의 생성자를 먼저 호출하는 코드를 작성해야함

4) 서브클래스의 인스턴스 자료형
	- 슈퍼클래스의 객체는 슈퍼클래스의 인스턴스
	- 서브클래스의 객체는 서브클래스의 인스턴스이면서 슈퍼클래스의 인스턴스
	- 형식
		isinstance(객체, 클래스 이름) :결과는 bool로 나옴


5) 다형성(Polymorphism) > 오버라이딩(재정의) : Overriding
	- 오버라이딩(재정의)는 다형성 요소중에 하나
	- 서브클래스의 메서드가 슈퍼클래스의 메서드를 대신해 사용하는 것을 의미함
	
	  부모 필드에 이미 a()라는 메서드가 존재한다면
	  부모 생성자가 먼저 호출되기 때문에 부모의 a()가
	  먼저 메모리에 올라간다. 그 다음 자식 필드를
	   메모리에 올릴 때 같은 이름의 a() 메서드가 선언되어
	   있다면 같은 이름으로 두개가 만들어지지 않고 기존에
	   만들어진 부모의 a() 메서드에 자식에서 작성한 내용이
	   덮어 씌워지게 된다. 그러므로 자식 객체로 a()를 사용하면
	   재정의된 기능으로 사용되며 이것을 오버라이딩이라 한다.


	+) 파이썬 공식 문서에서 오버로딩은 지원하지 않음
	   연산자 오버로딩이 존재함(인스턴스 객체끼리 서로 연산을 할 수 있게끔 기존에 연산자의 기능을 바꾸어 중복으로 정의하는 것)
	+) 자바에서는 오버로딩 존재함
	  자바에서는 다른 타임을 받을 수 없기 때문에 오버로딩을 함
	  파이썬은 가변 매개변수에 다른 타입을 받을 수 있기 때문에 오버로딩이라는 개념 없음




