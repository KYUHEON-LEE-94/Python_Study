1. 모듈
   - 파이썬의 파일(.py)은 모듈이 될 수 있음
   - 언제든지 사용될 수 있는 변수나 함수, 클래스들을 모아놓은 파일을 의미
   - 별칭 사용
      import 할 때 모듈명(이름)대신에 별명(alias)을 지정하고 사용하는 것을 의미
      as 키워드를 이용해서 사용
      (ex) import random as r

1) 표준모듈
   - import해서 사용 가능

2) 외부모듈
   - vs code : 터미널에서 pip install 모듈명
   - import 해서 사용 가능

3. 클래스
1) 클래스 기본 개념 정리
   함수(function)
   특정 기능을 수행하는 코드의 묶음
        (ex) print() : 출력기능, input() : 입력기능
   클래스(class)
   여러 변수와 함수(메서드/메소드)를 묶어서 처리할 수 있는 것
   데이터속성(data attribute)
   데이터 속성으로 데이터를 정의하는 것
   (self.변수에 데이터가 될 값을 대입해서 사용가능)
   메서드(method)
   메서드로서 처리를 정의하는 것
   (첫 번째 매개변수는 항상 self로 시작)
   속성(attribute)
   데이터 속성 메서드를 합쳐서 부르는 말
   객체(object)/인스턴스(instance)
   정의한 클래스를 실제로 이용하기 위해 사용
   클래스로부터 생성되는 각각의 객체가 인스턴스

#클래스 선언
# class 클래스명:
#     def 메서드명(self, 매개변수,..):
#         self.변수 = ...
#         return 반환식


class Person:   #클래스 정의
    def getName(self):  #사람의 이름을 정의하는 메서드 정의
    #self는 인스턴스 자신을 의미한다. 인스턴스 내부의 속성을 다루기 위해서, "자신의 속성을 다룬다"를 알려주기 위해서 self를 사용함
        return self.name    #사람의 이름을 나타내는 name 데이터 속성 정의

    def getAge(self):   #사람의 나이를 정의하는 메서드 정의
        return self.age    #사람의 나이를 나타내는 age 데이터 속성 정의

# 메서드 내부에서 self.필드명으로 접근하면 여러 객체도 한번의 선언으로 구별해서 다룰 수 있게 된다.

#클래스 사용
#[객체화]
# 객체명 = 클래스명()
#[각 필드에 접근]
#객체명.변수명
#객체명.메서드명()

pr = Person()   #객체화   / 인스턴스 작성
pr.name = "김영선"  #필드에 접근, 데이터 속성에 값을 대입, 현재 Person에는 아무런 속성값이 없으므로 [객체명.속성]으로 추가가능
pr.age = "20"       #데이터 속성에 값을 대입

name = pr.getName()
age = pr.getAge()

print(f"{name}의 나이는 {age}입니다.")

> 클래스의 장점 : 1명이 아니라 많은 사람들의 정보가 필요하다면 굳이 한명씩 이름, 성별, 나이에 해당하는 변수를 생성할 필요없이 클래스를 이용해서 간편하게 만들수 있다.

> 모든 사람들에게 공통으로 특정 기능을 추가하고 싶다면 단순히 클래스에서만 한번 추가해주면 된다.