6일차

복습 -> 넘파이 -> 판다스 -> 데이터시각화(맷플로립)

6일차 수업예제링크
https://colab.research.google.com/drive/1qJDv9Yu4NyDIMTPEzdGG8-LrXrrinvu-?usp=sharing

0. 복습
	- 넘파이 : 수치연산을 빠르게 할 수 있는 수치해석을 위한 라이브러리
	- 속성
		.shape : 배열의 각 차원 크기(튜플형태)
		.ndim : 배열의 차원 수
		.dtype : 배열의 각 요소 타입
		.size : 전체 요소의 개수

	- 함수
		np.arange() : 특정범위에 있는 원소를 자동생성하기
		np.astype() : 배열의 원소가 가지는 유형을 바꾸는 함수
		np.zeros((행, 열)) : 원소 0으로 이루어진 배열만들기
		np.ones((행, 열)) : 원소가 1로 이루어진 배열만들기
		np.transpose() : 행과 열을 바꾸기
		np.append(배열1, 배열2, 축)  : 이어붙이기 함수

+) Numpy의 주요 데이터형 dtype
	자료형(dtype)						접두사			크기(bit)	

	부호가 있는 정수		int				i			32, 64
	부호가 없는 정수		unit(unsigned integer)		u			32, 64
	실수 			float				f			32, 64
	복소수			complex				c
	불			bool				b
	바이트 문자열		string				s
	유니코드			unicode				u
	객체			object				o


1. 넘파이(Numpy)
1) 배열의 사칙연산( 원소끼리의 사칙연산 ) 
	- 배열의 덧셈/뺄셈 : 같은 자리 원소끼리 더하거나 빼기
	- 배열의 곱셈/나눗셈 : 같은 자리 원소끼리 곱하거나 나누기
	- 크기가 서로 다른 배열끼리 더하기 : 브로드캐스팅 기능
		=> 인공지능에서 많이 쓰는 기능


2. 판다스(Pandas)
	- 데이터 분석을 위한 효율적인 데이터 구조를 제공함
	- 서로 다른 여러가지 유형의 데이터를 공통의 포맷으로 정리하는 것
	- 판다스 공식문서
		https://pandas.pydata.org/pandas-docs/stable/

1) 특징
	- 데이터를 읽어들이거나 그래프 화 등 데이터 분석에 관한 작업이 쉽게 가능함
	- 1차원 배열형태의 데이터 구조인 Series, 2차원 배열형태의 데이터 구조인 DataFrame

2) 기본구조
	import pandas as pd

3) 시리즈(Series)
	- 1차원의 배열의 값에 각 값에 대응되는 인덱스를 부여할 수 있는 구조
		(ex) 엑셀 시트 열 한개를 생각
			A열 => 행번호 1, 2, 3, 4, 5,...

	시리즈
		열의 이름(name) -> 행의 이름(index)
		별도 입력이 없을 때는 행의 이름은 0부터 시작하는 정수값
		열의 이름은 빈값(None)

	- 딕셔너리 구조와 유사
	- 정수형 위치 인덱스와 인덱스 이름(인덱스 라벨)을 사용
	
	① 기본구조
		import pandas as pd
		
		s =  pd.Series(data, index = index, name = name)
			    데이터 값  행의 이름	     열의 이름

	- 시리즈는 모든 데이터 유형(정수, 실수, 문자열등) 담을 수 있음
	- 행이름 총칭해서 index, name 속성을 가질 수 있음(열이름)

	②  딕셔너리 -> 시리즈 변환
	- 딕셔너리의 키값이 시리즈의 인덱스, 딕셔너리의 value는 시리즈의 데이터 값으로 변환됨

	pd.Series(딕셔너리)
		.index : 인덱스 값을 확인
		.values : 데이터 값을 확인(리스트형태로 출력)
		.dtype : 자료형 확인

	③ 리스트 -> 시리즈 변환
	pd.Series(리스트)	
		.index : 인덱스 값을 확인
			별도 인덱스 지정이 없으면 자동으로 정수(0)형으로 인덱스가 지정
			인덱스를 지정할 때 숫자가 아닌 문자열로 지정가능함
		.values : 데이터 값을 확인(리스트 형태로 출력)

	④ 시리즈 -> 리스트 또는 딕셔너리 변환
		형변환

	⑤ 시리즈 값 수정, 추가, 삭제
	- 수정 : key 값으로 지정, 인덱스 값으로 지정
	- 추가 : key 값으로 지정, 위치 인덱스(번호) 지정할 경우에 에러가 발생
	- 삭제 : del 객체명['key값']
		객체명.pop('key값')  #원본에서 삭제

4) 데이터 프레임(DataFrame)
	- 배열과는 또 다른 형태로 데이터를 쉽게 가공하기 위한 일종의 틀
	- 2차원 리스트를 매개변수로 전달함
	- 행방향 인덱스(index)와 열방향 인덱스(column)가 존재함(행과 열을 가지는 자료구조)
	- 시리즈, 리스트, 딕셔너리, 또 다른 데이터 프레임으로 생성 가능함

	① 기본구조
	import pandas as pd
	#valuse	(몇행 몇열인지 데이터 값)
	#index (0부터 시작하고, index 지정 가능)
	#columns(열방향 인덱스 지정)
	
	df = pd.DataFrame(values, index = index, columns = columns)
	print(df)
	df #칸 생성되면서 보기 쉬운 형태로 출력됨

	② 딕셔너리 -> 데이터 프레임
	.DataFrame(딕셔너리 객체)
		- 딕셔너리형 자료를 판다스로 가공할 수 있는 데이터프레임으로 만들 수 있음
		- 딕셔너리형 자료를 만들고 DataFrame()을 사용
		- 시리즈에서는 키값이 인덱스, 데이터프레임에서는 키값이 열이름, 자동으로 행 인덱스에 숫자가 붙음
	[k1][v1][v2][v3][v4][v5] => [k1]
				    [v1]
				    [v2]
				    [v3]
				    [v4]
				    [v5]

	③ 리스트  -> 데이터 프레임
	.DataFrame(2차원 배열, index = 행 인덱스 배열, columns = 열 이름 배열)
		- 딕셔너리는 열로 변환, 리스트에서는 행으로 변환
	[v1][v2][v3][v4][v5] => [v1]
				[v2]
				[v3]
				[v4]
				[v5]

	④ 데이터 프레임 -> 리스트
	.tolist()
	
	⑤ 데이터 프레임 -> 딕셔너리
	.to_dict() : 열이름은 키로 변환, 각레코드는 값으로 변환, 인덱스는 키로 변환
	.to_dict('list') : 열이름은 키로 변환, 각 쌍은 각각의 목록으로 변환
	.to_dict('index') : 인덱스는 키로 변환, 각 레코드는 값으로 변환, 열이름은 키로 변환
				{인덱스 : {열이름:값}}
	.to_dict('records') : 각 행을 딕셔너리 변환

































